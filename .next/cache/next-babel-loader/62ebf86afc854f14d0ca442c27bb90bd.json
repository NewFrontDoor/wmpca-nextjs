{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  span{\\n    display: inline-block;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'; //import SectionTitle from './section-title';\n\nimport BlockContent from '@sanity/block-content-to-react';\nimport sanity from '../lib/sanity';\nvar ContentWrapper = styled.div(_templateObject());\nvar serializers = {\n  types: {\n    code: function code(props) {\n      return __jsx(\"pre\", {\n        \"data-language\": props.node.language\n      }, __jsx(\"code\", null, props.node.code));\n    }\n  }\n};\nexport default function Welcome(_ref) {\n  var welcome = _ref.welcome;\n\n  var _useState = useState(welcome),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(Boolean(welcome)),\n      dataFetched = _useState2[0],\n      setDataFetched = _useState2[1];\n\n  var welcomeQuery = \"\\n    *[_type == \\\"main\\\"][0]{\\n      welcome[]{\\n        ...,\\n        content[]{\\n          ...,\\n          asset->\\n        }\\n      }\\n    }\\n  \";\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(sanity.fetch(welcomeQuery));\n\n            case 2:\n              result = _context.sent;\n              setData(result[0]);\n              setDataFetched(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    if (dataFetched === false) {\n      fetchData();\n    } else {\n      setData(welcome);\n    }\n  }, [dataFetched, welcome, welcomeQuery]);\n  return dataFetched === true ? __jsx(React.Fragment, null, __jsx(ContentWrapper, null, __jsx(BlockContent, {\n    blocks: data,\n    serializers: serializers\n  }))) : '';\n}","map":null,"metadata":{},"sourceType":"module"}