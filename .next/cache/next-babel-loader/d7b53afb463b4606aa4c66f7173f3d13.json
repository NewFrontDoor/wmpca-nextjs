{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bratalix\\\\Documents\\\\ReactApps\\\\wmpca-nextjs\\\\components\\\\welcome.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  span{\\n    display: inline-block;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'; //import SectionTitle from './section-title';\n\nimport BlockContent from '@sanity/block-content-to-react';\nimport sanity from '../lib/sanity';\nvar ContentWrapper = styled.div(_templateObject());\nvar serializers = {\n  types: {\n    code: function code(props) {\n      return __jsx(\"pre\", {\n        \"data-language\": props.node.language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, __jsx(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, props.node.code));\n    }\n  }\n};\nexport default function Welcome(_ref) {\n  var welcome = _ref.welcome;\n\n  var _useState = useState(welcome),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(Boolean(welcome)),\n      dataFetched = _useState2[0],\n      setDataFetched = _useState2[1];\n\n  var welcomeQuery = \"\\n    *[_type == \\\"main\\\"][0]{\\n      welcome[]{\\n        ...,\\n        content[]{\\n          ...,\\n          asset->\\n        }\\n      }\\n    }\\n  \";\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(sanity.fetch(welcomeQuery));\n\n            case 2:\n              result = _context.sent;\n              setData(result[0]);\n              setDataFetched(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    if (dataFetched === false) {\n      fetchData();\n    } else {\n      setData(welcome);\n    }\n  }, [dataFetched, welcome, welcomeQuery]);\n  return dataFetched === true ? __jsx(React.Fragment, null, __jsx(ContentWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(BlockContent, {\n    blocks: data,\n    serializers: serializers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))) : '';\n}","map":{"version":3,"sources":["C:/Users/Bratalix/Documents/ReactApps/wmpca-nextjs/components/welcome.js"],"names":["React","useState","useEffect","styled","BlockContent","sanity","ContentWrapper","div","serializers","types","code","props","node","language","Welcome","welcome","data","setData","Boolean","dataFetched","setDataFetched","welcomeQuery","fetchData","fetch","result"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,IAAMC,cAAc,GAAGH,MAAM,CAACI,GAAV,mBAApB;AAMA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,cAAAC,KAAK;AAAA,aACT;AAAK,yBAAeA,KAAK,CAACC,IAAN,CAAWC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,KAAK,CAACC,IAAN,CAAWF,IAAlB,CADF,CADS;AAAA;AADN;AADW,CAApB;AAUA,eAAe,SAASI,OAAT,OAA4B;AAAA,MAAVC,OAAU,QAAVA,OAAU;;AAAA,kBACjBd,QAAQ,CAACc,OAAD,CADS;AAAA,MAClCC,IADkC;AAAA,MAC5BC,OAD4B;;AAAA,mBAEHhB,QAAQ,CAACiB,OAAO,CAACH,OAAD,CAAR,CAFL;AAAA,MAElCI,WAFkC;AAAA,MAErBC,cAFqB;;AAIzC,MAAMC,YAAY,yJAAlB;AAYAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKjB,MAAM,CAACkB,KAAP,CAAaF,YAAb,CADL;;AAAA;AACVG,cAAAA,MADU;AAEhBP,cAAAA,OAAO,CAACO,MAAM,CAAC,CAAD,CAAP,CAAP;AACAJ,cAAAA,cAAc,CAAC,IAAD,CAAd;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAMA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBG,MAAAA,SAAS;AACV,KAFD,MAGI;AACFL,MAAAA,OAAO,CAACF,OAAD,CAAP;AACD;AACF,GAbQ,EAaN,CAACI,WAAD,EAAcJ,OAAd,EAAuBM,YAAvB,CAbM,CAAT;AAeA,SAAOF,WAAW,KAAK,IAAhB,GACL,4BAEE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEH,IAAtB;AAA4B,IAAA,WAAW,EAAER,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFF,CADK,GAOF,EAPL;AAQD","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\n//import SectionTitle from './section-title';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\nimport sanity from '../lib/sanity';\r\n\r\nconst ContentWrapper = styled.div`\r\n  span{\r\n    display: inline-block;\r\n  }\r\n`;\r\n\r\nconst serializers = {\r\n  types: {\r\n    code: props => (\r\n      <pre data-language={props.node.language}>\r\n        <code>{props.node.code}</code>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function Welcome({welcome}) {\r\n  const [data, setData] = useState(welcome);\r\n  const [dataFetched, setDataFetched] = useState(Boolean(welcome));\r\n\r\n  const welcomeQuery = `\r\n    *[_type == \"main\"][0]{\r\n      welcome[]{\r\n        ...,\r\n        content[]{\r\n          ...,\r\n          asset->\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await sanity.fetch(welcomeQuery);\r\n      setData(result[0]);\r\n      setDataFetched(true);\r\n    };\r\n\r\n    if (dataFetched === false) {\r\n      fetchData();\r\n    }\r\n    else{\r\n      setData(welcome)\r\n    }\r\n  }, [dataFetched, welcome, welcomeQuery]);\r\n\r\n  return dataFetched === true ?  (\r\n    <>\r\n      {/*<SectionTitle text=\"Welcome\" />*/}\r\n      <ContentWrapper>\r\n          <BlockContent blocks={data} serializers={serializers} />\r\n      </ContentWrapper>\r\n    </>\r\n  ) : ('');\r\n}"]},"metadata":{},"sourceType":"module"}