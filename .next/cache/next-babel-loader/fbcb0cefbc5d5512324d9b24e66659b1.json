{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bratalix\\\\Documents\\\\ReactApps\\\\wmpca-nextjs\\\\pages\\\\[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  min-height: 550px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  gap: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport Header from '../components/header';\nimport BlockContent from '@sanity/block-content-to-react';\nimport sanity from '../lib/sanity';\nimport Form from '../components/form';\nimport getVideoId from 'get-video-id';\nimport Vimeo from '@u-wave/react-vimeo'; //import Youtube from 'react-youtube';\n\nimport Youtube from '@u-wave/react-youtube';\nimport AudioPlayer from 'react-audio-player';\nimport MainImage from '../components/main-image';\nimport Layout from '../components/layout';\nimport SanityBlock from '../utils/sanity-block';\nvar Grid = styled.div(_templateObject());\nvar Wrapper = styled.article(_templateObject2());\n\nvar InternalLinkSerializer = function InternalLinkSerializer(props) {\n  return __jsx(Link, {\n    href: props.mark.slug,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.children);\n};\n\nfunction FormSerializer(_ref) {\n  var _ref$node = _ref.node,\n      header = _ref$node.header,\n      id = _ref$node.id,\n      body = _ref$node.body,\n      fields = _ref$node.fields;\n  return __jsx(Form, {\n    header: header,\n    id: id,\n    description: body,\n    fields: fields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n}\n\nfunction AudioSerializer(_ref2) {\n  var node = _ref2.node;\n  var url = node.url;\n  return __jsx(AudioPlayer, {\n    src: url,\n    autoplay: true,\n    controls: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  });\n}\n\nvar Video = function Video(_ref3) {\n  var node = _ref3.node;\n  var url = node.url;\n\n  if (url) {\n    var video = getVideoId(url || null);\n\n    if (video.service === 'youtube') {\n      return __jsx(Youtube, {\n        modestBranding: true,\n        annotations: false,\n        video: video.id,\n        height: 360,\n        width: 640,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n\n    if (video.service === 'vimeo') {\n      return __jsx(Vimeo, {\n        showTitle: false,\n        showByline: false,\n        video: video.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }\n};\n\nvar serializers = {\n  types: {\n    code: function code(props) {\n      return __jsx(\"pre\", {\n        \"data-language\": props.node.language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, __jsx(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, props.node.code));\n    },\n    form: FormSerializer,\n    videoEmbed: Video,\n    audioEmbed: AudioSerializer\n  },\n  marks: {\n    internalLink: InternalLinkSerializer\n  }\n};\nexport default function SanityPage(_ref4) {\n  var mainData = _ref4.mainData;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(Header, {\n    heading: ['Page1'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(SanityBlock, {\n    blocks: mainData[0].content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n}\nSanityPage.propTypes = {\n  mainData: PropTypes.array.isRequired\n};\n\nSanityPage.getInitialProps = function _callee(_ref5) {\n  var query, pageQuery, results;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref5.query;\n          pageQuery = \"\\n      *[_type == \\\"page\\\" && slug.current match '\".concat(query.slug, \"']{\\n        ...,\\n          content[]{\\n            ...,\\n            _type == 'reference' => @-> {\\n              ...,\\n              blocks[] {\\n                ...,\\n                _type == 'reference' => @ ->\\n              }\\n            },\\n            markDefs[] {\\n              ...,\\n              _type == 'internalLink' => {\\n                  'slug': @.reference->slug.current\\n              }\\n            },\\n          asset->\\n          },\\n          mainImage{\\n            asset->\\n          },\\n          'id': _id,\\n        'pathname': '/' + slug.current\\n      }\\n    \");\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(sanity.fetch(pageQuery));\n\n        case 4:\n          results = _context.sent;\n          console.log(results);\n          return _context.abrupt(\"return\", {\n            mainData: results\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Bratalix/Documents/ReactApps/wmpca-nextjs/pages/[slug].js"],"names":["Link","PropTypes","styled","Header","BlockContent","sanity","Form","getVideoId","Vimeo","Youtube","AudioPlayer","MainImage","Layout","SanityBlock","Grid","div","Wrapper","article","InternalLinkSerializer","props","mark","slug","children","FormSerializer","node","header","id","body","fields","AudioSerializer","url","Video","video","service","serializers","types","code","language","form","videoEmbed","audioEmbed","marks","internalLink","SanityPage","mainData","content","propTypes","array","isRequired","getInitialProps","query","pageQuery","fetch","results","console","log"],"mappings":"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","sourcesContent":["import Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport Header from '../components/header';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\nimport sanity from '../lib/sanity';\r\nimport Form from '../components/form';\r\nimport getVideoId from 'get-video-id';\r\nimport Vimeo from '@u-wave/react-vimeo';\r\n//import Youtube from 'react-youtube';\r\nimport Youtube from '@u-wave/react-youtube';\r\nimport AudioPlayer from 'react-audio-player'\r\nimport MainImage from '../components/main-image';\r\nimport Layout from '../components/layout';\r\nimport SanityBlock from '../utils/sanity-block';\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Wrapper = styled.article`\r\n  min-height: 550px;\r\n`;\r\n\r\nconst InternalLinkSerializer = props => {\r\n  return <Link href={props.mark.slug}>{props.children}</Link>;\r\n};\r\n\r\nfunction FormSerializer({node: {header, id, body, fields}}) {\r\n  return <Form header={header} id={id} description={body} fields={fields} />;\r\n}\r\n\r\nfunction AudioSerializer({node}){\r\n  const {url} = node;\r\n  return <AudioPlayer src={url} autoplay controls />\r\n}\r\n\r\nconst Video = ({node}) => {\r\n  const {url} = node;\r\n  if (url) {\r\n    const video = getVideoId(url || null);\r\n\r\n    if (video.service === 'youtube') {\r\n      return <Youtube modestBranding annotations={false} video={video.id} height={360} width={640}/>;\r\n    }\r\n\r\n    if (video.service === 'vimeo') {\r\n      return <Vimeo showTitle={false} showByline={false} video={video.id} />;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nconst serializers = {\r\n  types: {\r\n    code: props => (\r\n      <pre data-language={props.node.language}>\r\n        <code>{props.node.code}</code>\r\n      </pre>\r\n    ),\r\n    form: FormSerializer,\r\n    videoEmbed: Video,\r\n    audioEmbed: AudioSerializer\r\n  },\r\n  marks: {\r\n    internalLink: InternalLinkSerializer,\r\n  }\r\n}\r\n\r\nexport default function SanityPage({mainData}) {\r\n  return  (\r\n    <Layout>\r\n      <Grid>\r\n        <Header heading={['Page1']} />\r\n        <SanityBlock blocks={mainData[0].content} />\r\n      </Grid>\r\n    </Layout>\r\n      \r\n  ) ;\r\n}\r\n\r\nSanityPage.propTypes = {\r\n    mainData: PropTypes.array.isRequired \r\n};\r\n\r\nSanityPage.getInitialProps = async ({query}) => {\r\n    const pageQuery = `\r\n      *[_type == \"page\" && slug.current match '${query.slug}']{\r\n        ...,\r\n          content[]{\r\n            ...,\r\n            _type == 'reference' => @-> {\r\n              ...,\r\n              blocks[] {\r\n                ...,\r\n                _type == 'reference' => @ ->\r\n              }\r\n            },\r\n            markDefs[] {\r\n              ...,\r\n              _type == 'internalLink' => {\r\n                  'slug': @.reference->slug.current\r\n              }\r\n            },\r\n          asset->\r\n          },\r\n          mainImage{\r\n            asset->\r\n          },\r\n          'id': _id,\r\n        'pathname': '/' + slug.current\r\n      }\r\n    `;\r\n    \r\n    const results = await sanity.fetch(pageQuery);\r\n    console.log(results)\r\n    return {mainData: results};\r\n  };"]},"metadata":{},"sourceType":"module"}