{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bratalix\\\\Documents\\\\ReactApps\\\\wmpca-nextjs\\\\pages\\\\[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport Header from '../components/header';\nimport BlockContent from '@sanity/block-content-to-react';\nimport sanity from '../lib/sanity';\nimport Form from '../components/form';\nimport getVideoId from 'get-video-id';\nimport Vimeo from '@u-wave/react-vimeo'; //import Youtube from 'react-youtube';\n\nimport Youtube from '@u-wave/react-youtube';\nimport AudioPlayer from 'react-audio-player';\nimport MainImage from '../components/main-image';\nimport Layout from '../components/layout';\nconst Grid = styled.div`\n  display: grid;\n  gap: 20px;\n`;\nconst Wrapper = styled.article`\n  min-height: 550px;\n`;\n\nconst InternalLinkSerializer = props => {\n  return __jsx(Link, {\n    to: props.mark.slug,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.children);\n};\n\nfunction FormSerializer({\n  node: {\n    header,\n    id,\n    body,\n    fields\n  }\n}) {\n  return __jsx(Form, {\n    header: header,\n    id: id,\n    description: body,\n    fields: fields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}\n\nconst Audio = ({\n  node\n}) => {\n  const {\n    url\n  } = node;\n  return __jsx(AudioPlayer, {\n    src: url,\n    autoplay: true,\n    controls: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  });\n};\n\nconst Video = ({\n  node\n}) => {\n  const {\n    url\n  } = node;\n\n  if (url) {\n    const video = getVideoId(url || null);\n\n    if (video.service === 'youtube') {\n      return __jsx(Youtube, {\n        modestBranding: true,\n        annotations: false,\n        video: video.id,\n        height: 360,\n        width: 640,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    }\n\n    if (video.service === 'vimeo') {\n      return __jsx(Vimeo, {\n        showTitle: false,\n        showByline: false,\n        video: video.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n  }\n};\n\nconst serializers = {\n  types: {\n    code: props => __jsx(\"pre\", {\n      \"data-language\": props.node.language,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, props.node.code)),\n    form: FormSerializer,\n    videoEmbed: Video,\n    audioEmbed: Audio\n  },\n  marks: {\n    internalLink: InternalLinkSerializer\n  }\n};\nexport default function SanityPage({\n  mainData\n}) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(Header, {\n    heading: ['Page1'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(BlockContent, {\n    blocks: mainData[0].content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n}\nSanityPage.propTypes = {\n  mainData: PropTypes.array.isRequired\n};\n\nSanityPage.getInitialProps = async ({\n  query\n}) => {\n  const pageQuery = `\n      *[_type == \"page\" && slug.current match '${query.slug}']{\n        ...,\n          content[]{\n            ...,\n            _type == 'reference' => @-> {\n              ...,\n              blocks[] {\n                ...,\n                _type == 'reference' => @ ->\n              }\n            },\n            markDefs[] {\n              ...,\n              _type == 'internalLink' => {\n                  'slug': @.reference->slug.current\n              }\n            },\n          asset->\n          },\n          mainImage{\n            asset->\n          },\n          'id': _id,\n        'pathname': '/' + slug.current\n      }\n    `;\n  const results = await sanity.fetch(pageQuery);\n  console.log(results);\n  return {\n    mainData: results\n  };\n};","map":{"version":3,"sources":["C:/Users/Bratalix/Documents/ReactApps/wmpca-nextjs/pages/[slug].js"],"names":["Link","PropTypes","styled","Header","BlockContent","sanity","Form","getVideoId","Vimeo","Youtube","AudioPlayer","MainImage","Layout","Grid","div","Wrapper","article","InternalLinkSerializer","props","mark","slug","children","FormSerializer","node","header","id","body","fields","Audio","url","Video","video","service","serializers","types","code","language","form","videoEmbed","audioEmbed","marks","internalLink","SanityPage","mainData","content","propTypes","array","isRequired","getInitialProps","query","pageQuery","results","fetch","console","log"],"mappings":"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","sourcesContent":["import Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport Header from '../components/header';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\nimport sanity from '../lib/sanity';\r\nimport Form from '../components/form';\r\nimport getVideoId from 'get-video-id';\r\nimport Vimeo from '@u-wave/react-vimeo';\r\n//import Youtube from 'react-youtube';\r\nimport Youtube from '@u-wave/react-youtube';\r\nimport AudioPlayer from 'react-audio-player'\r\nimport MainImage from '../components/main-image';\r\nimport Layout from '../components/layout';\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Wrapper = styled.article`\r\n  min-height: 550px;\r\n`;\r\n\r\nconst InternalLinkSerializer = props => {\r\n  return <Link to={props.mark.slug}>{props.children}</Link>;\r\n};\r\n\r\nfunction FormSerializer({node: {header, id, body, fields}}) {\r\n  return <Form header={header} id={id} description={body} fields={fields} />;\r\n}\r\n\r\nconst Audio = ({node}) => {\r\n  const {url} = node;\r\n  return <AudioPlayer src={url} autoplay controls />\r\n}\r\n\r\nconst Video = ({node}) => {\r\n  const {url} = node;\r\n  if (url) {\r\n    const video = getVideoId(url || null);\r\n\r\n    if (video.service === 'youtube') {\r\n      return <Youtube modestBranding annotations={false} video={video.id} height={360} width={640}/>;\r\n    }\r\n\r\n    if (video.service === 'vimeo') {\r\n      return <Vimeo showTitle={false} showByline={false} video={video.id} />;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nconst serializers = {\r\n  types: {\r\n    code: props => (\r\n      <pre data-language={props.node.language}>\r\n        <code>{props.node.code}</code>\r\n      </pre>\r\n    ),\r\n    form: FormSerializer,\r\n    videoEmbed: Video,\r\n    audioEmbed: Audio\r\n  },\r\n  marks: {\r\n    internalLink: InternalLinkSerializer,\r\n  }\r\n}\r\n\r\nexport default function SanityPage({mainData}) {\r\n  return  (\r\n    <Layout>\r\n      <Grid>\r\n        <Header heading={['Page1']} />\r\n        <BlockContent blocks={mainData[0].content}></BlockContent>\r\n      </Grid>\r\n    </Layout>\r\n      \r\n  ) ;\r\n}\r\n\r\nSanityPage.propTypes = {\r\n    mainData: PropTypes.array.isRequired \r\n};\r\n\r\nSanityPage.getInitialProps = async ({query}) => {\r\n    const pageQuery = `\r\n      *[_type == \"page\" && slug.current match '${query.slug}']{\r\n        ...,\r\n          content[]{\r\n            ...,\r\n            _type == 'reference' => @-> {\r\n              ...,\r\n              blocks[] {\r\n                ...,\r\n                _type == 'reference' => @ ->\r\n              }\r\n            },\r\n            markDefs[] {\r\n              ...,\r\n              _type == 'internalLink' => {\r\n                  'slug': @.reference->slug.current\r\n              }\r\n            },\r\n          asset->\r\n          },\r\n          mainImage{\r\n            asset->\r\n          },\r\n          'id': _id,\r\n        'pathname': '/' + slug.current\r\n      }\r\n    `;\r\n    \r\n    const results = await sanity.fetch(pageQuery);\r\n    console.log(results)\r\n    return {mainData: results};\r\n  };"]},"metadata":{},"sourceType":"module"}