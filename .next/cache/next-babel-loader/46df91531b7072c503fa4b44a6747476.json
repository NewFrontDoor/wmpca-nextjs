{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bratalix\\\\Documents\\\\ReactApps\\\\wmpca-nextjs\\\\components\\\\form.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nconst Grid = styled('section')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n\n  input:focus,\n  textarea:focus {\n    outline: 3px solid gold;\n  }\n\n  label {\n    display: block;\n    grid-column: 1 / 2;\n    padding-bottom: 5px;\n  }\n  checkbox{\n      display: block;\n  }\n  input[type=\"text\"],\n  input[type=\"email\"],\n  input[type=\"telephone\"],\n  textarea,\n  select,\n  button {\n    width: 100%;\n    box-sizing: border-box;\n  }\n  .fullwidth {\n    grid-column: 1 / 3;\n  }\n  .inline, input[type=\"checkbox\"] {\n    display: inline;\n  }\n`;\nconst RadioGroup = styled('fieldset')`\n  input {\n    width: initial;\n  }\n  label {\n    display: inline;\n    margin-left: 10px;\n    padding-bottom: 0px;\n  }\n  legend {\n    grid-column: 1 / 3;\n  }\n`;\n\nfunction getFormField(field) {\n  console.log(field);\n\n  switch (field.input) {\n    case 'textarea':\n      return __jsx(\"div\", {\n        className: \"fullwidth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: field.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, field.label), __jsx(\"textarea\", {\n        id: field.id,\n        name: field.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n\n    case 'select':\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: field.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, field.label), __jsx(\"select\", {\n        id: field.id,\n        name: field.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, field.values.map(value => __jsx(\"option\", {\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, value))));\n\n    case 'radio':\n      return __jsx(RadioGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, __jsx(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, field.label), field.values.map(value => __jsx(\"div\", {\n        key: field.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"radio\",\n        id: value,\n        name: field.id,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), __jsx(\"label\", {\n        htmlFor: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, value))));\n\n    case 'checkbox':\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"checkbox\",\n        id: field.id,\n        name: field.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), __jsx(\"label\", {\n        className: \"inline\",\n        htmlFor: field.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, field.label));\n\n    default:\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: field.id,\n        required: field.required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, field.label, field.required ? __jsx(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"*\") : ''), __jsx(\"input\", {\n        type: field.input,\n        id: field.id,\n        name: field.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n  }\n}\n\nexport default function Form({\n  title,\n  id,\n  description,\n  fields\n}) {\n  return __jsx(\"form\", {\n    id: id,\n    onSubmit: e => {\n      e.preventDefault();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, title), __jsx(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, fields.map(field => {\n    return getFormField(field);\n  }), __jsx(\"input\", {\n    className: \"fullwidth\",\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }))));\n}\nForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired\n};","map":{"version":3,"sources":["C:/Users/Bratalix/Documents/ReactApps/wmpca-nextjs/components/form.js"],"names":["React","PropTypes","styled","Grid","RadioGroup","getFormField","field","console","log","input","id","label","values","map","value","required","Form","title","description","fields","e","preventDefault","propTypes","string","isRequired","array"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Grid = styled('section')`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap: 20px;\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    outline: 3px solid gold;\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    grid-column: 1 / 2;\r\n    padding-bottom: 5px;\r\n  }\r\n  checkbox{\r\n      display: block;\r\n  }\r\n  input[type=\"text\"],\r\n  input[type=\"email\"],\r\n  input[type=\"telephone\"],\r\n  textarea,\r\n  select,\r\n  button {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  .fullwidth {\r\n    grid-column: 1 / 3;\r\n  }\r\n  .inline, input[type=\"checkbox\"] {\r\n    display: inline;\r\n  }\r\n`;\r\n\r\nconst RadioGroup = styled('fieldset')`\r\n  input {\r\n    width: initial;\r\n  }\r\n  label {\r\n    display: inline;\r\n    margin-left: 10px;\r\n    padding-bottom: 0px;\r\n  }\r\n  legend {\r\n    grid-column: 1 / 3;\r\n  }\r\n`;\r\n\r\nfunction getFormField(field) {\r\n  console.log(field);\r\n  switch (field.input) {\r\n    case 'textarea':\r\n      return (\r\n        <div className=\"fullwidth\">\r\n          <label htmlFor={field.id}>{field.label}</label>\r\n          <textarea id={field.id} name={field.label} />\r\n        </div>\r\n      );\r\n    case 'select':\r\n      return (\r\n        <div>\r\n          <label htmlFor={field.id}>{field.label}</label>\r\n          <select id={field.id} name={field.label}>\r\n            {field.values.map(value => (\r\n              <option value={value}>{value}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      );\r\n    case 'radio':\r\n      return (\r\n        <RadioGroup>\r\n          <legend>{field.label}</legend>\r\n          {field.values.map(value => (\r\n            <div key={field.id}>\r\n              <input type=\"radio\" id={value} name={field.id} value={value} />\r\n              <label htmlFor={value}>{value}</label>\r\n            </div>\r\n          ))}\r\n        </RadioGroup>\r\n      );\r\n    case 'checkbox':\r\n      return (\r\n        <div>\r\n          <input type=\"checkbox\" id={field.id} name={field.label} />\r\n          <label className=\"inline\" htmlFor={field.id}>\r\n            {field.label}\r\n          </label>\r\n        </div>\r\n      );\r\n    default:\r\n      return (\r\n        <div>\r\n          <label htmlFor={field.id} required={field.required}>\r\n            {field.label}\r\n            {field.required ? <strong>*</strong> : ''}\r\n          </label>\r\n          <input type={field.input} id={field.id} name={field.label} />\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default function Form({title, id, description, fields}) {\r\n  return (\r\n    <form id={id} onSubmit={(e) => {e.preventDefault()}}>\r\n      <fieldset>\r\n        <h2>{title}</h2>\r\n        <Grid>\r\n          {fields.map(field => {\r\n            return getFormField(field);\r\n          })}\r\n        <input className=\"fullwidth\" type=\"submit\" value=\"Submit\" />\r\n        </Grid>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  fields: PropTypes.array.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}